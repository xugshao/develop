一、Git 放弃修改，强制覆盖本地代码
	1.git fetch --all  //从远程拉取最新的代码 不merge

	2.git reset --hard origin/develop  //使用指定分支的代码（此处develop）强制覆盖代码

	3.git pull  //从远程拉取最新的代码 自动merge
	
	4.git强制覆盖本地命令（单条执行）：
	git fetch --all && git reset --hard origin/master && git pull
	
	
二、git强制提交本地分支覆盖远程分支
	1.git push origin 分支名 --force 或 git push -f origin 分支名
	
	
三、如果只在本地修改，还没有commit，那么用git status, 打印信息为：
	# On branch master
	# Changes not staged for commit:
	#   (use "git add <file>..." to update what will be committed)
	#   (use "git checkout -- <file>..." to discard changes in working directory)
	#
	#    modified:   conf/gitolite.conf
	#
	no changes added to commit (use "git add" and/or "git commit -a")

			commit之后，用git status，打印信息为：

	# On branch master
	# Your branch is ahead of 'origin/master' by 1 commit.
	#
	nothing to commit (working directory clean)

	说明没有文件需要commit，但是本地仓库 有一个commit ahead原来的master，就是本地仓库有一个提交，比远程仓库要先进一个commit。git push origin master之后，再用git staus，打印信息为：

	# On branch master nothing to commit (working directory clean)
	
	当运行 git status ,git会将本地分支dev与它正在跟踪的远程分支进行比较（origin/master），因为origin/master没有被改变，它仍然是当前dev分支（和origin/dev）后面的1提交/更改，所以会出现提示。

	我们想要做的是改变本地dev分支来跟踪远程dev分支。

	解决方法（二选一）：

	①、运行

	git branch --set-upstream-to=origin/dev

	②、在推送时附加--set-upstream到推送命令：

	git push origin dev --set-upstream
	
	
四、git 关联远程分支
	git branch --set-upstream-to=origin/remote_branch  your_branch

	其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支

	1、如果远程新建了一个分支，本地没有该分支。

	可以利用 git checkout --track origin/branch_name ，这时本地会新建一个分支名叫 branch_name ，会自动跟踪远程的同名分支 branch_name。

	ep:git checkout --track origin/branch_name
	
	2.如果本地新建了一个分支 branch_name，但是在远程没有。

	这时候 push 和 pull 指令就无法确定该跟踪谁，一般来说我们都会使其跟踪远程同名分支，所以可以利用 git push --set-upstream origin branch_name ，这样就可以自动在远程创建一个 branch_name 分支，然后本地分支会 track 该分支。后面再对该分支使用 push 和 pull 就自动同步。

	ep:git push --set-upstream origin branch_name
	
	git checkout -b dev origin/dev这个命令

	它意思是说.切换到dev分支上,接着跟远程的origin地址上的dev分支关联起来
	